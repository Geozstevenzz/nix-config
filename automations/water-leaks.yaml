- id: water_leak_push_notify
  alias: "Water leak: push notify Josh"
  description: Send a critical push notification to Josh's iPhone when any leak sensor reports ON
  mode: single
  trigger:
    # Explicit list of known leak sensors; add more here as installed
    - platform: state
      entity_id: binary_sensor.leak_crawl_space
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_main_bathroom
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_kitchen_sink
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_side_bathroom
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_refrigerator
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_attic
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_shed
      to: 'on'
      for: '00:00:05'
    - platform: state
      entity_id: binary_sensor.leak_laundry_room
      to: 'on'
      for: '00:00:05'
  variables:
    leak_name: >-
      {{ area_name(trigger.entity_id) if area_name(trigger.entity_id) else state_attr(trigger.entity_id, 'friendly_name') }}
  condition:
    - condition: state
      entity_id: input_boolean.leak_alert_acknowledged
      state: 'off'
    - condition: state
      entity_id: timer.leak_alert_snooze
      state: 'idle'
  action:
    - service: notify.mobile_app_spire
      data:
        title: "üö® WATER LEAK DETECTED"
        message: >-
          {{ leak_name if leak_name else 'Unknown location' }}: Water detected! Check immediately.
        data:
          tag: "leak_alert"
          url: /lovelace/overview
          push:
            interruption-level: critical
            sound:
              name: "default"
              critical: 1
              volume: 1.0
          actions:
            - action: LEAK_ACK
              title: Acknowledge
            - action: LEAK_SNOOZE_15
              title: Snooze 15m
            - action: LEAK_SNOOZE_60
              title: Snooze 60m

- id: water_leak_tts_initial
  alias: "Water leak: initial TTS on Sonos (any time)"
  description: Speak a TTS alert on Sonos Move immediately when a leak is detected.
  mode: restart
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.leak_crawl_space
        - binary_sensor.leak_main_bathroom
        - binary_sensor.leak_kitchen_sink
        - binary_sensor.leak_side_bathroom
        - binary_sensor.leak_refrigerator
        - binary_sensor.leak_attic
        - binary_sensor.leak_shed
        - binary_sensor.leak_laundry_room
      to: 'on'
      for: '00:00:05'
  variables:
    leak_name: >-
      {{ area_name(trigger.entity_id) if area_name(trigger.entity_id) else state_attr(trigger.entity_id, 'friendly_name') }}
    tts_msg: >-
      {{ 'Water leak detected' ~ (' in ' ~ leak_name if leak_name) ~ '. Please check immediately.' }}
  condition:
    - condition: state
      entity_id: input_boolean.leak_alert_tts_enabled
      state: 'on'
    - condition: state
      entity_id: input_boolean.leak_alert_acknowledged
      state: 'off'
    - condition: state
      entity_id: timer.leak_alert_snooze
      state: 'idle'
  action:
    - service: sonos.snapshot
      target:
        entity_id: media_player.sonos_move
      data:
        with_group: false
    - service: media_player.volume_set
      target:
        entity_id: media_player.sonos_move
      data:
        volume_level: "{{ states('input_number.leak_alert_tts_volume') | float(0.35) }}"
    - service: tts.speak
      target:
        entity_id: tts.piper
      data:
        cache: false
        media_player_entity_id: media_player.sonos_move
        message: "{{ tts_msg }}"
    - delay: '00:00:08'
    - service: sonos.restore
      target:
        entity_id: media_player.sonos_move

- id: water_leak_tts_repeat
  alias: "Water leak: repeat TTS until acknowledged or snoozed"
  description: Every 2 minutes, re-announce leaks if still active, not acknowledged, and not snoozed.
  mode: single
  trigger:
    - platform: time_pattern
      minutes: "/2"
  variables:
    leak_entities:
      - binary_sensor.leak_crawl_space
      - binary_sensor.leak_main_bathroom
      - binary_sensor.leak_kitchen_sink
      - binary_sensor.leak_side_bathroom
      - binary_sensor.leak_refrigerator
      - binary_sensor.leak_attic
      - binary_sensor.leak_shed
      - binary_sensor.leak_laundry_room
    # Map sensors to their per-sensor ack booleans
    ack_map: >-
      {{ {
        'binary_sensor.leak_crawl_space': 'input_boolean.leak_ack_crawl_space',
        'binary_sensor.leak_main_bathroom': 'input_boolean.leak_ack_main_bathroom',
        'binary_sensor.leak_kitchen_sink': 'input_boolean.leak_ack_kitchen_sink',
        'binary_sensor.leak_side_bathroom': 'input_boolean.leak_ack_side_bathroom',
        'binary_sensor.leak_refrigerator': 'input_boolean.leak_ack_refrigerator',
        'binary_sensor.leak_attic': 'input_boolean.leak_ack_attic',
        'binary_sensor.leak_shed': 'input_boolean.leak_ack_shed',
        'binary_sensor.leak_laundry_room': 'input_boolean.leak_ack_laundry'
      } }}
    unacked_names: >-
      {% set ns = namespace(items=[]) %}
      {% for e in leak_entities %}
        {% set ack = ack_map[e] %}
        {% if states(e) == 'on' and states(ack) != 'on' %}
          {% set nm = area_name(e) if area_name(e) else state_attr(e, 'friendly_name') %}
          {% set ns.items = ns.items + [ nm if nm else e ] %}
        {% endif %}
      {% endfor %}
      {{ ns.items | join(', ') }}
    tts_msg: >-
      {{ 'Water leak detected' ~ (' in ' ~ unacked_names if unacked_names) ~ '. Please check immediately.' }}
  condition:
    - condition: state
      entity_id: input_boolean.leak_alert_tts_enabled
      state: 'on'
    - condition: state
      entity_id: input_boolean.leak_alert_acknowledged
      state: 'off'
    - condition: state
      entity_id: timer.leak_alert_snooze
      state: 'idle'
    - condition: template
      value_template: >-
        {{ unacked_names | length > 0 }}
  action:
    - service: sonos.snapshot
      target:
        entity_id: media_player.sonos_move
      data:
        with_group: false
    - service: media_player.volume_set
      target:
        entity_id: media_player.sonos_move
      data:
        volume_level: "{{ states('input_number.leak_alert_tts_volume') | float(0.35) }}"
    - service: tts.speak
      target:
        entity_id: tts.piper
      data:
        cache: false
        media_player_entity_id: media_player.sonos_move
        message: "{{ tts_msg }}"
    - delay: '00:00:08'
    - service: sonos.restore
      target:
        entity_id: media_player.sonos_move

- id: water_leak_ack_action
  alias: "Water leak: acknowledge via mobile action"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: LEAK_ACK
  action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.leak_alert_acknowledged
    - service: notify.mobile_app_spire
      data:
        message: "clear_notification"
        data:
          tag: "leak_alert"
    - service: notify.mobile_app_spire
      data:
        title: "‚úì Leak Alert Acknowledged"
        message: "Please address the water leak immediately"
        data:
          tag: "leak_ack_confirmation"
          push:
            interruption-level: active

- id: water_leak_ack_all_immediate
  alias: "Water leak: Ack All immediate stop"
  description: Stop current TTS/audio on Sonos when Ack All is pressed.
  mode: single
  trigger:
    - platform: state
      entity_id: input_boolean.leak_alert_acknowledged
      to: 'on'
  action:
    - service: media_player.media_stop
      target:
        entity_id: media_player.sonos_move

- id: water_leak_snooze15_action
  alias: "Water leak: snooze 15m via mobile action"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: LEAK_SNOOZE_15
  action:
    - service: timer.start
      target:
        entity_id: timer.leak_alert_snooze
      data:
        duration: '00:15:00'
    - service: notify.mobile_app_spire
      data:
        message: "clear_notification"
        data:
          tag: "leak_alert"
    - service: notify.mobile_app_spire
      data:
        title: "‚è∏ Leak Alerts Snoozed"
        message: "Alerts snoozed for 15 minutes"
        data:
          tag: "leak_snooze_confirmation"
          push:
            interruption-level: passive

- id: water_leak_snooze60_action
  alias: "Water leak: snooze 60m via mobile action"
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: LEAK_SNOOZE_60
  action:
    - service: timer.start
      target:
        entity_id: timer.leak_alert_snooze
      data:
        duration: '01:00:00'
    - service: notify.mobile_app_spire
      data:
        message: "clear_notification"
        data:
          tag: "leak_alert"
    - service: notify.mobile_app_spire
      data:
        title: "‚è∏ Leak Alerts Snoozed"
        message: "Alerts snoozed for 60 minutes"
        data:
          tag: "leak_snooze_confirmation"
          push:
            interruption-level: passive

- id: water_leak_ack_button
  alias: "Water leak: acknowledge via input button"
  trigger:
    - platform: state
      entity_id: input_button.leak_acknowledge
  action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.leak_alert_acknowledged

- id: water_leak_snooze15_button
  alias: "Water leak: snooze 15m via input button"
  trigger:
    - platform: state
      entity_id: input_button.leak_snooze_15
  action:
    - service: timer.start
      target:
        entity_id: timer.leak_alert_snooze
      data:
        duration: '00:15:00'

- id: water_leak_snooze60_button
  alias: "Water leak: snooze 60m via input button"
  trigger:
    - platform: state
      entity_id: input_button.leak_snooze_60
  action:
    - service: timer.start
      target:
        entity_id: timer.leak_alert_snooze
      data:
        duration: '01:00:00'

- id: water_leak_clear_reset
  alias: "Water leak: reset acknowledgement when all leaks are clear"
  trigger:
    - platform: template
      value_template: >-
        {{
          states('binary_sensor.leak_crawl_space') == 'off' and
          states('binary_sensor.leak_main_bathroom') == 'off' and
          states('binary_sensor.leak_kitchen_sink') == 'off' and
          states('binary_sensor.leak_side_bathroom') == 'off' and
          states('binary_sensor.leak_refrigerator') == 'off' and
          states('binary_sensor.leak_attic') == 'off' and
          states('binary_sensor.leak_shed') == 'off' and
          states('binary_sensor.leak_laundry_room') == 'off'
        }}
      for: '00:05:00'
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.leak_alert_acknowledged
    - service: timer.cancel
      target:
        entity_id: timer.leak_alert_snooze
    - service: input_boolean.turn_off
      target:
        entity_id:
          - input_boolean.leak_ack_crawl_space
          - input_boolean.leak_ack_main_bathroom
          - input_boolean.leak_ack_kitchen_sink
          - input_boolean.leak_ack_side_bathroom
          - input_boolean.leak_ack_refrigerator
          - input_boolean.leak_ack_attic
          - input_boolean.leak_ack_shed
          - input_boolean.leak_ack_laundry
    - service: notify.mobile_app_spire
      data:
        message: "clear_notification"
        data:
          tag: "leak_alert"
    - service: notify.mobile_app_spire
      data:
        title: "‚úì Water Leak Resolved"
        message: "All leak sensors are now dry"
        data:
          tag: "leak_resolved"
          push:
            interruption-level: active
