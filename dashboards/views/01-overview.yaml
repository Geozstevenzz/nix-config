title: Overview
path: overview
icon: mdi:home
theme: default
panel: true
cards:
- type: vertical-stack
  cards:
  # Room cards
  - !include ./overview-cards/front-deck.yaml
  - !include ./overview-cards/living-room.yaml
  - !include ./overview-cards/main-bedroom.yaml
  - !include ./overview-cards/dining-room.yaml
  - !include ./overview-cards/kitchen.yaml
  - !include ./overview-cards/laundry-room.yaml
  - !include ./overview-cards/office.yaml
  - !include ./overview-cards/server-closet.yaml
  - !include ./overview-cards/back-deck.yaml
  # Garage Door - Single toggle button (reliable, no JS/animation)
  - type: custom:bubble-card
    card_type: button
    button_type: state
    entity: cover.garage_door
    name: Garage
    icon: mdi:garage-variant
    show_state: true
    show_last_changed: true
    styles: |-
      {% set gd = states('cover.garage_door') %}
      ha-card {
        {% if gd in ['open','opening'] %}
          --bubble-button-background-color: rgba(41, 182, 246, 0.22) !important;
          --bubble-button-icon-background-color: rgba(25, 118, 210, 0.65) !important;
        {% else %}
          --bubble-button-background-color: rgba(120, 144, 156, 0.20) !important;
          --bubble-button-icon-background-color: rgba(55, 71, 79, 0.55) !important;
        {% endif %}
      }
      .bubble-icon {
        {% if gd in ['open','opening'] %}
          color: #BBDEFB !important;
        {% else %}
          color: #ECEFF1 !important;
        {% endif %}
      }
      .bubble-name,
      .bubble-state {
        {% if gd in ['open','opening'] %}
          color: #0D47A1 !important;
        {% else %}
          color: #37474F !important;
        {% endif %}
      }
    sub_button:
    - entity: cover.garage_door
      icon: mdi:garage-open
      show_background: true
      tap_action:
        action: call-service
        service: cover.toggle
        target:
          entity_id: cover.garage_door
      hold_action:
        action: call-service
        service: cover.stop_cover
        target:
          entity_id: cover.garage_door
      styles: |-
        ${(() => {
          const st = hass.states['cover.garage_door']?.state || 'unknown';
          let icon = 'mdi:help-circle';
          if (st === 'open') icon = 'mdi:arrow-down-bold-circle';
          else if (st === 'closed') icon = 'mdi:arrow-up-bold-circle';
          else if (st === 'opening') icon = 'mdi:progress-upload';
          else if (st === 'closing') icon = 'mdi:progress-download';

          if (subButtonIcon && subButtonIcon[0]) {
            subButtonIcon[0].setAttribute('icon', icon);
          }

          const isOpen = ['open', 'opening'].includes(st);
          const bg = isOpen ? 'rgba(25, 118, 210, 0.22)' : 'rgba(120, 144, 156, 0.20)';
          const color = isOpen ? '#1565C0' : '#455A64';

          return `
            .bubble-sub-button { background-color: ${bg} !important; border-radius: 16px; }
            .bubble-sub-button-icon { color: ${color} !important; --mdc-icon-size: 26px; }
          `;
        })()}
    button_action:
      tap_action:
        action: more-info
      hold_action:
        action: none
    tap_action:
      action: more-info
    hold_action:
      action: more-info




  # ADU
  - type: custom:bubble-card
    card_type: separator
    name: ADU
    icon: mdi:home
  - type: custom:bubble-card
    card_type: button
    button_type: name
    name: Shed
    icon: mdi:home-variant
    show_state: false
    show_last_changed: false
    show_attribute: false
    card_layout: large
    sub_button:
    # Shed Door (closed)
    - entity: binary_sensor.shed_door
      name: Door
      icon: mdi:door-closed
      show_state: false
      show_background: true
      show_icon: true
      styles: |-
        ${(() => {
          const s = hass.states['binary_sensor.shed_door']?.state === 'on';
          const bg = s ? 'rgba(100, 181, 246, 0.28)' : 'rgba(76, 175, 80, 0.30)';
          const color = s ? '#1E88E5' : '#43a047';
          // Only sub-button on this card (index 0)
          if (subButtonIcon && subButtonIcon[0]) {
            subButtonIcon[0].setAttribute('icon', s ? 'mdi:door-open' : 'mdi:door-closed');
          }
          return `
            .bubble-sub-button { background-color: ${bg} !important; }
            .bubble-sub-button-icon { --mdc-icon-size: 22px; color: ${color} !important; }
          `;
        })()}
  # Water Sensors
  - type: custom:bubble-card
    card_type: separator
    name: Water Sensors
    icon: mdi:water
  # Leak Controls card (acknowledge all leaks)
  - type: custom:bubble-card
    card_type: button
    button_type: name
    name: Leak Controls
    icon: mdi:water-alert
    show_state: false
    show_last_changed: false
    show_attribute: false
    card_layout: normal
    sub_button:
    - entity: input_boolean.leak_alert_acknowledged
      icon: mdi:check-all
      name: Acknowledge
      show_name: true
      show_background: true
      tap_action:
        action: call-service
        service: input_boolean.turn_on
        service_data:
          entity_id: input_boolean.leak_alert_acknowledged
      styles: |-
        ${(() => {
          const leaks = [
            'binary_sensor.leak_crawl_space',
            'binary_sensor.leak_main_bathroom',
            'binary_sensor.leak_kitchen_sink',
            'binary_sensor.leak_side_bathroom',
            'binary_sensor.leak_refrigerator',
            'binary_sensor.leak_attic',
            'binary_sensor.leak_shed',
            'binary_sensor.leak_laundry_room',
          ];
          const ackMap = {
            'binary_sensor.leak_crawl_space': 'input_boolean.leak_ack_crawl_space',
            'binary_sensor.leak_main_bathroom': 'input_boolean.leak_ack_main_bathroom',
            'binary_sensor.leak_kitchen_sink': 'input_boolean.leak_ack_kitchen_sink',
            'binary_sensor.leak_side_bathroom': 'input_boolean.leak_ack_side_bathroom',
            'binary_sensor.leak_refrigerator': 'input_boolean.leak_ack_refrigerator',
            'binary_sensor.leak_attic': 'input_boolean.leak_ack_attic',
            'binary_sensor.leak_shed': 'input_boolean.leak_ack_shed',
            'binary_sensor.leak_laundry_room': 'input_boolean.leak_ack_laundry',
          };
          const globalAck = hass.states['input_boolean.leak_alert_acknowledged']?.state === 'on';
          let active = 0, unacked = 0;
          for (const e of leaks) {
            if (hass.states[e]?.state === 'on') {
              active++;
              const ack = ackMap[e];
              if (!ack || hass.states[ack]?.state !== 'on') unacked++;
            }
          }
          const actionable = unacked > 0 && !globalAck;
          const isAcknowledged = globalAck || (active > 0 && unacked === 0);

          // Update icon and text based on state
          if (subButtonIcon && subButtonIcon[0]) {
            subButtonIcon[0].setAttribute('icon', isAcknowledged ? 'mdi:check-circle' : 'mdi:alert-circle');
          }
          if (subButtonName && subButtonName[0]) {
            if (active === 0) {
              subButtonName[0].textContent = 'No Leaks';
            } else if (isAcknowledged) {
              subButtonName[0].textContent = '✓ Acknowledged';
            } else {
              subButtonName[0].textContent = `Acknowledge (${unacked})`;
            }
          }

          // Color coding: red for actionable, green for acknowledged, gray for idle
          const bg = actionable ? 'rgba(229, 115, 115, 0.35)' :
                     isAcknowledged ? 'rgba(76, 175, 80, 0.30)' :
                     'rgba(120, 144, 156, 0.20)';
          const color = actionable ? '#C62828' :
                       isAcknowledged ? '#2e7d32' :
                       '#546E7A';
          const ptr = actionable ? 'auto' : 'none';

          return `
            .bubble-sub-button {
              background-color: ${bg} !important;
              border-radius: 16px;
              pointer-events: ${ptr} !important;
              min-width: 120px !important;
            }
            .bubble-sub-button-icon {
              color: ${color} !important;
              --mdc-icon-size: 22px;
            }
            .bubble-sub-button-name {
              color: ${color} !important;
              font-weight: 600 !important;
              font-size: 13px !important;
            }
          `;
        })()}
    - entity: timer.leak_alert_snooze
      icon: mdi:alarm-snooze
      name: Snooze 15m
      show_name: true
      show_background: true
      tap_action:
        action: call-service
        service: timer.start
        service_data:
          entity_id: timer.leak_alert_snooze
          duration: '00:15:00'
      styles: |-
        ${(() => {
          const leaks = [
            'binary_sensor.leak_crawl_space',
            'binary_sensor.leak_main_bathroom',
            'binary_sensor.leak_kitchen_sink',
            'binary_sensor.leak_side_bathroom',
            'binary_sensor.leak_refrigerator',
            'binary_sensor.leak_attic',
            'binary_sensor.leak_shed',
            'binary_sensor.leak_laundry_room',
          ];
          const globalAck = hass.states['input_boolean.leak_alert_acknowledged']?.state === 'on';
          const snoozeState = hass.states['timer.leak_alert_snooze']?.state || 'idle';
          const timer = hass.states['timer.leak_alert_snooze'];
          let active = 0;
          for (const e of leaks) if (hass.states[e]?.state === 'on') active++;
          const actionable = active > 0 && !globalAck && snoozeState === 'idle';
          const isSnoozed = snoozeState === 'active';

          // Update icon and text
          if (subButtonIcon && subButtonIcon[1]) {
            subButtonIcon[1].setAttribute('icon', isSnoozed ? 'mdi:alarm-check' : 'mdi:alarm-snooze');
          }
          if (subButtonName && subButtonName[1]) {
            if (isSnoozed) {
              const remaining = timer?.attributes?.remaining || '';
              subButtonName[1].textContent = `⏸ Snoozed ${remaining}`;
            } else if (active === 0) {
              subButtonName[1].textContent = 'No Leaks';
            } else if (globalAck) {
              subButtonName[1].textContent = 'Acknowledged';
            } else {
              subButtonName[1].textContent = 'Snooze 15m';
            }
          }

          // Color coding
          const bg = isSnoozed ? 'rgba(156, 39, 176, 0.30)' :
                     actionable ? 'rgba(255, 183, 77, 0.35)' :
                     'rgba(120, 144, 156, 0.20)';
          const color = isSnoozed ? '#6A1B9A' :
                       actionable ? '#EF6C00' :
                       '#546E7A';
          const ptr = actionable ? 'auto' : 'none';

          return `
            .bubble-sub-button {
              background-color: ${bg} !important;
              border-radius: 16px;
              pointer-events: ${ptr} !important;
              min-width: 120px !important;
            }
            .bubble-sub-button-icon {
              color: ${color} !important;
              --mdc-icon-size: 22px;
            }
            .bubble-sub-button-name {
              color: ${color} !important;
              font-weight: 600 !important;
              font-size: 13px !important;
            }
          `;
        })()}
    - entity: timer.leak_alert_snooze
      icon: mdi:alarm-snooze
      name: Snooze 60m
      show_name: true
      show_background: true
      tap_action:
        action: call-service
        service: timer.start
        service_data:
          entity_id: timer.leak_alert_snooze
          duration: '01:00:00'
      styles: |-
        ${(() => {
          const leaks = [
            'binary_sensor.leak_crawl_space',
            'binary_sensor.leak_main_bathroom',
            'binary_sensor.leak_kitchen_sink',
            'binary_sensor.leak_side_bathroom',
            'binary_sensor.leak_refrigerator',
            'binary_sensor.leak_attic',
            'binary_sensor.leak_shed',
            'binary_sensor.leak_laundry_room',
          ];
          const globalAck = hass.states['input_boolean.leak_alert_acknowledged']?.state === 'on';
          const snoozeState = hass.states['timer.leak_alert_snooze']?.state || 'idle';
          const timer = hass.states['timer.leak_alert_snooze'];
          let active = 0;
          for (const e of leaks) if (hass.states[e]?.state === 'on') active++;
          const actionable = active > 0 && !globalAck && snoozeState === 'idle';
          const isSnoozed = snoozeState === 'active';

          // Update icon and text
          if (subButtonIcon && subButtonIcon[2]) {
            subButtonIcon[2].setAttribute('icon', isSnoozed ? 'mdi:alarm-check' : 'mdi:alarm-snooze');
          }
          if (subButtonName && subButtonName[2]) {
            if (isSnoozed) {
              const remaining = timer?.attributes?.remaining || '';
              subButtonName[2].textContent = `⏸ Snoozed ${remaining}`;
            } else if (active === 0) {
              subButtonName[2].textContent = 'No Leaks';
            } else if (globalAck) {
              subButtonName[2].textContent = 'Acknowledged';
            } else {
              subButtonName[2].textContent = 'Snooze 60m';
            }
          }

          // Color coding
          const bg = isSnoozed ? 'rgba(156, 39, 176, 0.30)' :
                     actionable ? 'rgba(255, 183, 77, 0.35)' :
                     'rgba(120, 144, 156, 0.20)';
          const color = isSnoozed ? '#6A1B9A' :
                       actionable ? '#EF6C00' :
                       '#546E7A';
          const ptr = actionable ? 'auto' : 'none';

          return `
            .bubble-sub-button {
              background-color: ${bg} !important;
              border-radius: 16px;
              pointer-events: ${ptr} !important;
              min-width: 120px !important;
            }
            .bubble-sub-button-icon {
              color: ${color} !important;
              --mdc-icon-size: 22px;
            }
            .bubble-sub-button-name {
              color: ${color} !important;
              font-weight: 600 !important;
              font-size: 13px !important;
            }
          `;
        })()}
  # Water sensor grid - 2 columns, 6 actual sensors
  - type: grid
    columns: 2
    square: false
    cards:
    # Crawl Space
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_crawl_space
      name: "🏠 Crawl Space"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_crawl_space']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_crawl_space']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_crawl_space']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_crawl_space']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_crawl_space
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_crawl_space
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_crawl_space','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_crawl_space','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
    # Main Bathroom Sink
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_main_bathroom
      name: "🚿 Main Bathroom"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_main_bathroom']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_main_bathroom']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_main_bathroom']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_main_bathroom']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_main_bathroom
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_main_bathroom
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_main_bathroom','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_main_bathroom','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
    # Kitchen Sink
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_kitchen_sink
      name: "🍳 Kitchen Sink"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_kitchen_sink']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_kitchen_sink']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_kitchen_sink']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_kitchen_sink']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_kitchen_sink
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_kitchen_sink
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_kitchen_sink','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_kitchen_sink','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
    # Side Bathroom Sink
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_side_bathroom
      name: "🚿 Side Bathroom"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_side_bathroom']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_side_bathroom']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_side_bathroom']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_side_bathroom']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_side_bathroom
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_side_bathroom
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_side_bathroom','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_side_bathroom','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
    # Refrigerator
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_refrigerator
      name: "🧊 Refrigerator"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_refrigerator']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_refrigerator']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_refrigerator']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_refrigerator']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_refrigerator
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_refrigerator
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_refrigerator','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_refrigerator','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
    # Attic
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_attic
      name: "⬆️ Attic"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_attic']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_attic']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_attic']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_attic']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_attic
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_attic
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_attic','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_attic','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
          --mdc-icon-size: 22px;
          }
    # Laundry Room (Washing Machine)
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_laundry_room
      name: "🧺 Laundry Room"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_laundry_room']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_laundry_room']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_laundry_room']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_laundry_room']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_laundry
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_laundry
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_laundry','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_laundry','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
    # Shed
    - type: custom:bubble-card
      card_type: button
      button_type: state
      entity: binary_sensor.leak_shed
      name: "🏚️ Shed"
      icon: mdi:water
      show_state: true
      show_last_changed: false
      styles: |
        .bubble-button-card-container {
          background: ${hass.states['binary_sensor.leak_shed']?.state === 'on'
            ? 'rgba(244, 67, 54, 0.9)'
            : 'rgba(76, 175, 80, 0.2)'} !important;
          ${hass.states['binary_sensor.leak_shed']?.state === 'on'
            ? 'animation: pulse-leak 2s infinite;'
            : ''}
        }
        .bubble-icon-container {
          background: ${hass.states['binary_sensor.leak_shed']?.state === 'on'
            ? 'rgba(211, 47, 47, 1.0)'
            : 'rgba(76, 175, 80, 0.5)'} !important;
        }
        .bubble-icon {
          color: white !important;
        }
        .bubble-name {
          color: ${hass.states['binary_sensor.leak_shed']?.state === 'on'
            ? '#d32f2f'
            : '#2e7d32'} !important;
          font-weight: 600;
        }
        @keyframes pulse-leak {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.7; }
        }
      sub_button:
      - entity: input_boolean.leak_ack_shed
        icon: mdi:check-circle
        name: Ack
        show_background: true
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.leak_ack_shed
        styles: |
          .bubble-sub-button {
            {% if is_state('input_boolean.leak_ack_shed','on') %}
              background-color: rgba(76, 175, 80, 0.25) !important;
            {% else %}
              background-color: rgba(120, 144, 156, 0.20) !important;
            {% endif %}
            border-radius: 16px;
          }
          .bubble-sub-button-icon {
            {% if is_state('input_boolean.leak_ack_shed','on') %}
              color: #2e7d32 !important;
            {% else %}
              color: #546E7A !important;
            {% endif %}
            --mdc-icon-size: 22px;
          }
  # Popups are preloaded at top via hidden conditional wrapper